// #### Task 1 üíª

// –°–æ–∑–¥–∞—Ç—å –ª—é–±–æ–π –æ–±—å–µ–∫—Ç —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏ –∏ –ª—é–±—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –Ω–∏—Ö, –∞ –∑–∞—Ç–µ–º —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ –æ–±—å–µ–∫—Ç–∞. 

// const index = {
//     key1: 'value',
//     key2: 'value2'
// }

// delete index.key1, delete index.key2
// console.log(index);


// #### Task 2 üñ•

// –°–æ–∑–¥–∞—Ç—å –ª—é–±–æ–π –æ–±—å–µ–∫—Ç —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏ –∏ –ª—é–±—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –Ω–∏—Ö,
// –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –≤ –æ–±—å–µ–∫—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–ª—é—á –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å **true**

// const index = {
//     key1: 'value',
//     key2: 'value2'
// }
// Object.keys(index)
// console.log(Boolean(index.key1), Boolean(index.key2));


// #### Task 4 üñ•
// –î–∞–Ω –æ–±—å–µ–∫—Ç:

// ```javascript
// const colors = {
//     'ru pum pu ru rum': {
//         red: '–∫—Ä–∞—Å–Ω—ã–π',
//         green: '–∑–µ–ª–µ–Ω—ã–π',
//         blue: '—Å–∏–Ω–∏–π'
//     },
// };
// ```
// –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–ª–æ–≤–æ –∫—Ä–∞—Å–Ω—ã–π –∏ —Å–∏–Ω–∏–π

// const colors = {
//     'ru pum pu ru rum': {
//         red: '–∫—Ä–∞—Å–Ω—ã–π',
//         green: '–∑–µ–ª–µ–Ω—ã–π',
//         blue: '—Å–∏–Ω–∏–π'
//     },
// }

// console.log(`${colors["ru pum pu ru rum"].red} –∏ ${colors["ru pum pu ru rum"].blue}`);

// #### Task 5 üñ•

// –î–∞–Ω –æ–±—å–µ–∫—Ç:

// let salaries = {
//     andrey: 500,
//     sveta: 413,
//     anton: 987,
//     andrey: 664,
//     alexandra: 199
// }
// –í—ã—á–∏—Å–ª–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

// ------–Ω–µ—É–≤–µ—Ä–µ–Ω-----------
// let salaries = {
//     andrey: 500,
//     sveta: 413,
//     anton: 987,
//     andrey: 664,
//     alexandra: 199
// }
// function sumSalaries(salaries) {
//     return Object.values(salaries).reduce((a, b) => a + b, 0 / salaries || 1) 
//   }
//   console.log(`–û–±—â–∞—è –∑–ø:${sumSalaries(salaries)}`);


// #### Task 2 üñ•

// –î–∞–Ω—ã –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ–±—å–µ–∫—Ç–∞. –°—Ä–∞–≤–Ω–∏—Ç–µ –∏—Ö —Ç–∞–∫ —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —Ä–∞–≤–Ω—ã

// ```javascript
//     let student1 = {
//         name: 'Polina',
//         age: 27,
//     }

//     let student2 = {
//         name: 'Polina',
//         age: 27,
//     }
// ```

    // let student1 = {
    //     name: 'Polina',
    //     age: 27,
    // }

    // let student2 = {
    //     name: 'Polina',
    //     age: 27,
    // }

    // console.log(JSON.stringify(student1) === JSON.stringify(student2));


//     #### Task 1 üñ•

// –í—ã–≤–µ–¥–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ **`forEach`**

// ```javascript
//     const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
// ```

// > –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`

// const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
// fibonacci.forEach(function(item, index, array) {
//     fibonacci.forEach(item => console.log(item));
// })

// fibonacci.forEach(item => console.log(item));


// #### Task 3 üñ•

// –° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ **`filter`** —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.

// ```javascript
//     const numbers = [7, -4, 32, -90, 54, 32, -21]
// ```

// > –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`.

// const numbers = [7, -4, 32, -90, 54, 32, -21]

// function isPrime(num) {
//     for (let i = 0; num < i; i++) {
//         if (num % i == 0) {
//             return false;
//         }
//     }
//     return num > 1;
// }
// console.log(numbers.filter(isPrime));

// numbers1 = numbers.filter(next => next > 1)
// console.log(numbers1);


// –ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`reduce`** –ø–æ–ª—É—á–∏—Ç–µ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –º–∞—Å—Å–∏–≤–∞.

// ```javascript
//     const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
// ```

// const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]

// let result = fibonacci.reduce((sum, current) => sum + current, 0);
// console.log(result);


// –ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`find`** –Ω–∞–π–¥–∏—Ç–µ –≤ –º–∞—Å—Å–∏–≤–µ –ø–µ—Ä–≤–æ–µ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ.

// ```javascript
//     const numbers = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5]

// const numbers = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5]
// result = numbers.find(next => next >= 24)
// console.log(result);

// function max_even(arra) {

//     arra.find((x, y) => y - x);
  
//     for (let i = 0; i < arra.length; i++) {
//       if (arra[i] % 2 == 0)
//         return arra[i];
//       }
//     }
  
//   console.log(max_even(numbers));


//   result = numbers.find(number => number % 2 == 0)
//   console.log(result); 